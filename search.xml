<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一道简单的单表代换加密</title>
    <url>/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>学长的大作业, 感觉还挺有意思的, 遂记录之.</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知明文节选自《聊斋志异》, 转为拼音后进行<code>单表加密</code>, 现要根据密文进行解密. </p>
<p>密文如下:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRZRLKOBNRLVIROZNKOHUKOBRSNRVUIRSNRXVRUVOXVRXYUYSNVOHGVRLROLROLDYIRBRLYOBNROFEKLRBNRURBNRJYKOSNKOHCKOCYBNKOMKOBNRMKOHSNRPROLRURCKOHBNYXYJRKOXVRUVONYBNVLKDPRBYDJYKOSNKOHMVRIRKDTKOHJROHJYVCYGKRKOIRKJRPRLRLROHZNRLRLRNKRLDYQDYBNRIRKJRWROHWROHMKOUKOJYVEKRBNRSNYGKRMVONVSNVOXVRUVOIRKDLYVPRVLKOSNRBRUYLYJYOHYIRKOHBNRLRJRYURZNYRPROHAKOWYDGYLRBNRQDOHPRKOBKRIRKMYCYLDYEYIROHYUVOBNVTKOHIRSYRLYPROZNYUKOBNVOIRJRKOPROKRGVRBNRVUGYBNRMVRUVOXVREYGRSNROFBYDPRZVOFJRVMYEYGYWROHOFLYVJYOSYDLRGYOVOHWVOHEKBNVWYLREYVUSNRHYKOZNYOPRYGKOHSNKOHEYUYJYOBNVJRUVOUYDGYWROHPRVNKOHPYLRTKOHBKOZDOHBNRSNKDPROHMKOHPRJRKDLROSDOHCYPRLYQVSYDOFGYBNRSYDBKRSNVOBNRSKOHSNRBNYVUEKDBNRSNYMYLROHJRNYLROFSYDLROZNYPYNKOSNYIRJRKOBNRBNRBNRJRYZNYHYDEVBNRNYBNRGYEDOHCYLRKRBNYOFOKRIRKLYVJYOBKRGYWROHEKOHIRKOHLDOHJYVLROSNRBNRPRAROHZNYAYBNRJYURLYKDIRVUTKOHLRSNYGYSNYPYOFGYBKRBVPRVJYKOTRYTKOQDOHMVROFJYVLROPYNKOSNYERGKJYKOBKNYOWKSYDLRXRBNRLRUREYNKOOFBNRJROHGYBNRJYVNYEYBNRJRLKOJYKOVUOFLRMKOHLREKJYXROHSDYBNYJYKOXRKDGYQVEVJRUVOHLYNKOSNYGKJYKOBNDOHEVBNRLVSNYGYSNYKOHLROBKRGKRBNYSNRGYCYEYOFOKRIRKLYBNRLRLYVSKOURGYHDOHEKOHCYPYBNRSKOURNYLRJYLROHOFVUBROFOKRIRSNDYLRIRKOSYDIRKOMYURHDOHLRPYTKOHSNDYLROHXYBNYMYIRKWKJRJRYBNRSYRSNDYLROHJRVGYJYVHYMYOFOKRURLYLROGDTKOHSYRTVVUMKOHEYOFLDYBDOHBNRZNYXVOSNRJRVQVLDYZRWRWKOHBNRXROHGKDBNYOFLYVBRQVLRZNYVUSNRLR</span><br></pre></td></tr></table></figure></div>
<h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p>单表加密, 最常见的做法就是做词频分析.</p>
<p>如果是英文文本的话, 用<a class="link"   href="https://quipqiup.com/" >quipqiup<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>很快就能得解.</p>
<p>但这里是中文拼音, 似乎没有现成的工具, 那就老老实实做词频分析.</p>
<h4 id="统计聊斋全书的拼音词频"><a href="#统计聊斋全书的拼音词频" class="headerlink" title="统计聊斋全书的拼音词频"></a>统计聊斋全书的拼音词频</h4><p>首先要知道中文拼音的一般频率分布, 这里我直接网上找<a class="link"   href="https://www.isyd.net/books/37/" >《聊斋志异》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的txt文本.</p>
<p>去除前言什么的, 只留下小说部分, 保存txt为<code>sample.txt</code>, 运行如下代码 (GPT-4o)</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：读取文本文件并去除标点符号、空格等非中文字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_text</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    <span class="comment"># 使用正则表达式去除标点符号和非汉字字符</span></span><br><span class="line">    text = re.sub(<span class="string">r&#x27;[^\u4e00-\u9fa5]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, text)  <span class="comment"># 只保留中文字符</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：提取拼音声母和韵母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_initial_and_final</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="comment"># 声母，包括组合声母</span></span><br><span class="line">    initials = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;ch&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>]</span><br><span class="line">    finals = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;ei&#x27;</span>, <span class="string">&#x27;ui&#x27;</span>, <span class="string">&#x27;ao&#x27;</span>, <span class="string">&#x27;ou&#x27;</span>, <span class="string">&#x27;iu&#x27;</span>, <span class="string">&#x27;ie&#x27;</span>, <span class="string">&#x27;ve&#x27;</span>, <span class="string">&#x27;er&#x27;</span>, <span class="string">&#x27;an&#x27;</span>, <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;un&#x27;</span>, <span class="string">&#x27;ün&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;ang&#x27;</span>, <span class="string">&#x27;eng&#x27;</span>, <span class="string">&#x27;ing&#x27;</span>, <span class="string">&#x27;ong&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用pypinyin来获取拼音</span></span><br><span class="line">    pinyin_list = lazy_pinyin(word)</span><br><span class="line"></span><br><span class="line">    result = &#123;<span class="string">&#x27;initials&#x27;</span>: [], <span class="string">&#x27;finals&#x27;</span>: []&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pinyin_list:</span><br><span class="line">        <span class="comment"># 优先处理组合声母 zh, ch, sh</span></span><br><span class="line">        <span class="keyword">for</span> initial <span class="keyword">in</span> [<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;ch&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.startswith(initial):  <span class="comment"># 优先匹配组合声母</span></span><br><span class="line">                result[<span class="string">&#x27;initials&#x27;</span>].append(initial)</span><br><span class="line">                p = p[<span class="built_in">len</span>(initial):]  <span class="comment"># 去掉已经匹配的声母部分</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理剩余的普通声母</span></span><br><span class="line">        <span class="keyword">for</span> initial <span class="keyword">in</span> [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.startswith(initial):</span><br><span class="line">                result[<span class="string">&#x27;initials&#x27;</span>].append(initial)</span><br><span class="line">                p = p[<span class="built_in">len</span>(initial):]  <span class="comment"># 去掉已经匹配的声母部分</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理韵母</span></span><br><span class="line">        <span class="keyword">for</span> final <span class="keyword">in</span> finals:</span><br><span class="line">            <span class="keyword">if</span> p.endswith(final):</span><br><span class="line">                result[<span class="string">&#x27;finals&#x27;</span>].append(final)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：统计拼音声母和韵母的频率，同时生成拼音大写形式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_pinyin</span>(<span class="params">text</span>):</span><br><span class="line">    initial_counter = Counter()</span><br><span class="line">    final_counter = Counter()</span><br><span class="line">    pinyin_list = []  <span class="comment"># 存储拼音的大写形式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历文本中的每个字</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> text:</span><br><span class="line">        <span class="comment"># 提取每个字的声母和韵母</span></span><br><span class="line">        result = extract_initial_and_final(word)</span><br><span class="line">        <span class="comment"># 更新频率统计</span></span><br><span class="line">        initial_counter.update(result[<span class="string">&#x27;initials&#x27;</span>])</span><br><span class="line">        final_counter.update(result[<span class="string">&#x27;finals&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将拼音转换为大写并保存到pinyin_list</span></span><br><span class="line">        pinyin_list.extend(lazy_pinyin(word))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 拼音大写并去除分隔符</span></span><br><span class="line">    pinyin_text = <span class="string">&#x27;&#x27;</span>.join([p.upper() <span class="keyword">for</span> p <span class="keyword">in</span> pinyin_list])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按照频率从大到小排序</span></span><br><span class="line">    sorted_initials = initial_counter.most_common()  <span class="comment"># 返回排序后的声母</span></span><br><span class="line">    sorted_finals = final_counter.most_common()      <span class="comment"># 返回排序后的韵母</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sorted_initials, sorted_finals, pinyin_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    filename = <span class="string">&#x27;sample.txt&#x27;</span>  <span class="comment"># 中文文本文件路径</span></span><br><span class="line">    text = clean_text(filename)    <span class="comment"># 清理文本</span></span><br><span class="line">    </span><br><span class="line">    initial_freq, final_freq, pinyin_text = count_pinyin(text)  <span class="comment"># 统计声母和韵母频率，并获取拼音大写文本</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出声母频率，按频率从大到小排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;声母频数统计：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> initial, count <span class="keyword">in</span> initial_freq:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;initial&#125;</span>: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出韵母频率，按频率从大到小排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n韵母频数统计：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> final, count <span class="keyword">in</span> final_freq:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;final&#125;</span>: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将拼音大写文本写入到pinyin.txt文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pinyin.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> pinyin_file:</span><br><span class="line">        pinyin_file.write(pinyin_text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>得到如下排好序的频数表:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">声母频数统计：</span><br><span class="line">zh: 29643</span><br><span class="line">sh: 28934</span><br><span class="line">j: 28765</span><br><span class="line">q: 18439</span><br><span class="line">x: 18200</span><br><span class="line">b: 17367</span><br><span class="line">r: 14622</span><br><span class="line">d: 14158</span><br><span class="line">l: 13905</span><br><span class="line">g: 13834</span><br><span class="line">h: 13649</span><br><span class="line">z: 12934</span><br><span class="line">n: 11449</span><br><span class="line">f: 11430</span><br><span class="line">m: 10998</span><br><span class="line">s: 10567</span><br><span class="line">ch: 9473</span><br><span class="line">t: 7654</span><br><span class="line">c: 6688</span><br><span class="line">k: 5939</span><br><span class="line">p: 3464</span><br><span class="line"></span><br><span class="line">韵母频数统计：</span><br><span class="line">i: 111316</span><br><span class="line">u: 76706</span><br><span class="line">an: 32737</span><br><span class="line">e: 32492</span><br><span class="line">o: 26338</span><br><span class="line">ang: 19494</span><br><span class="line">en: 14397</span><br><span class="line">ing: 12005</span><br><span class="line">ong: 11837</span><br><span class="line">a: 11427</span><br><span class="line">eng: 11316</span><br><span class="line">in: 8509</span><br><span class="line">er: 6659</span><br><span class="line">un: 5059</span><br><span class="line">v: 3797</span><br></pre></td></tr></table></figure></div>
<h4 id="统计密文的词频"><a href="#统计密文的词频" class="headerlink" title="统计密文的词频"></a>统计密文的词频</h4><p>将密文保存到<code>ciphertext.txt</code>, 运行如下代码 (GPT-4o):</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNWordList</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成 N 元字符频率列表，并保存到文件。</span></span><br><span class="line"><span class="string">    :param n: N 元词，1表示单字母，2表示二元字母，3表示三元字母，依此类推</span></span><br><span class="line"><span class="string">    :return: 返回频率列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c_file = <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>)  <span class="comment"># 读取文件</span></span><br><span class="line">    c_text = c_file.read()  <span class="comment"># 读取文本</span></span><br><span class="line">    char_list = <span class="built_in">list</span>(c_text)  <span class="comment"># 转化为列表，每个字母为一个元素</span></span><br><span class="line"></span><br><span class="line">    word_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理 n = 1 的情况</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        word_list = char_list  <span class="comment"># 直接使用字符列表</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 获取 N 元字符组合</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(char_list) - n + <span class="number">1</span>):  <span class="comment"># 从当前位置开始取 n 个字符</span></span><br><span class="line">            temp_list = char_list[i:i + n]  <span class="comment"># 获取连续 n 个字符</span></span><br><span class="line">            temp_str = <span class="string">&quot;&quot;</span>.join(temp_list)  <span class="comment"># 将这些字符组合成一个字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp_str) &gt; <span class="number">1</span>:  <span class="comment"># 确保字符组合的长度大于1</span></span><br><span class="line">                word_list.append(temp_str)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 统计加密字符串中各个 N 元字符的出现次数</span></span><br><span class="line">    tempSet = <span class="built_in">set</span>(word_list)  <span class="comment"># 转为集合去重</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存为字典，key:字母组合，value:出现次数</span></span><br><span class="line">    tempDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tempSet:</span><br><span class="line">        tempDict[i] = word_list.count(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表排序, 以元组形式</span></span><br><span class="line">    dict_sorted = <span class="built_in">sorted</span>(tempDict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出到文件</span></span><br><span class="line">    file_name = <span class="string">f&#x27;fre_<span class="subst">&#123;n&#125;</span>.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n&#125;</span>元字母&quot;</span>, <span class="string">&quot;出现次数&quot;</span>, <span class="string">&quot;\t频率&quot;</span>, file=f)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dict_sorted:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">1</span>] &gt; <span class="number">1</span>:  <span class="comment"># 检查字母组合出现次数大于1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i[<span class="number">0</span>]&#125;</span>\t\t<span class="subst">&#123;i[<span class="number">1</span>]&#125;</span>\t\t<span class="subst">&#123;i[<span class="number">1</span>] / <span class="built_in">len</span>(c_text)&#125;</span>&quot;</span>, file=f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回频率列表</span></span><br><span class="line">    frequency_list = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> dict_sorted <span class="keyword">if</span> i[<span class="number">1</span>] &gt; <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> frequency_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，获取各个元词频</span></span><br><span class="line">getNWordList(<span class="number">1</span>)  <span class="comment"># 1 元词</span></span><br><span class="line">getNWordList(<span class="number">2</span>)  <span class="comment"># 2 元词</span></span><br><span class="line">getNWordList(<span class="number">3</span>)  <span class="comment"># 3 元词</span></span><br><span class="line">getNWordList(<span class="number">4</span>)  <span class="comment"># 4 元词</span></span><br><span class="line">getNWordList(<span class="number">5</span>)  <span class="comment"># 5 元词</span></span><br><span class="line">getNWordList(<span class="number">6</span>)  <span class="comment"># 6 元词</span></span><br></pre></td></tr></table></figure></div>
<p>得到如下结果 (只截取部分):</p>
<p>fre_1.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1元字母 出现次数 	频率</span><br><span class="line">R		197		0.15354637568199533</span><br><span class="line">Y		148		0.11535463756819954</span><br><span class="line">O		141		0.10989867498051442</span><br><span class="line">N		99		0.07716289945440374</span><br><span class="line">K		98		0.07638347622759158</span><br><span class="line">V		68		0.05300077942322681</span><br><span class="line">H		62		0.048324240062353856</span><br><span class="line">B		62		0.048324240062353856</span><br><span class="line">L		62		0.048324240062353856</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_2.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2元字母 出现次数 	频率</span><br><span class="line">KO		58		0.04520654715510522</span><br><span class="line">OH		56		0.043647700701480906</span><br><span class="line">BN		45		0.03507404520654715</span><br><span class="line">NR		44		0.034294621979735</span><br><span class="line">LR		37		0.028838659392049885</span><br><span class="line">RO		35		0.027279812938425563</span><br><span class="line">NY		30		0.02338269680436477</span><br><span class="line">SN		30		0.02338269680436477</span><br><span class="line">IR		21		0.01636788776305534</span><br><span class="line">RL		20		0.01558846453624318</span><br><span class="line">RK		20		0.01558846453624318</span><br><span class="line">JY		20		0.01558846453624318</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_3.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3元字母 出现次数 	频率</span><br><span class="line">BNR		32		0.02494154325798909</span><br><span class="line">KOH		24		0.018706157443491817</span><br><span class="line">ROH		18		0.014029618082618862</span><br><span class="line">LRO		14		0.010911925175370226</span><br><span class="line">YBN		14		0.010911925175370226</span><br><span class="line">RBN		12		0.009353078721745909</span><br><span class="line">YLR		12		0.009353078721745909</span><br><span class="line">IRK		12		0.009353078721745909</span><br><span class="line">SNR		11		0.00857365549493375</span><br><span class="line">RSN		10		0.00779423226812159</span><br><span class="line">NKO		10		0.00779423226812159</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_4.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4元字母 出现次数 	频率</span><br><span class="line">YBNR		10		0.00779423226812159</span><br><span class="line">RBNR		9		0.007014809041309431</span><br><span class="line">JYKO		7		0.005455962587685113</span><br><span class="line">BNRS		7		0.005455962587685113</span><br><span class="line">YLRO		6		0.004676539360872954</span><br><span class="line">RUVO		6		0.004676539360872954</span><br><span class="line">TKOH		6		0.004676539360872954</span><br><span class="line">KOSN		6		0.004676539360872954</span><br><span class="line">RIRK		6		0.004676539360872954</span><br><span class="line">BNRJ		6		0.004676539360872954</span><br><span class="line">NRLR		5		0.003897116134060795</span><br><span class="line">KOHS		5		0.003897116134060795</span><br><span class="line">OBNR		5		0.003897116134060795</span><br><span class="line">NKOH		5		0.003897116134060795</span><br><span class="line">OHBN		5		0.003897116134060795</span><br><span class="line">LROH		5		0.003897116134060795</span><br><span class="line">WROH		5		0.003897116134060795</span><br><span class="line">BNRL		5		0.003897116134060795</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_5.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5元字母 出现次数 	频率</span><br><span class="line">OHBNR		4		0.003117692907248636</span><br><span class="line">VRUVO		4		0.003117692907248636</span><br><span class="line">KOHSN		4		0.003117692907248636</span><br><span class="line">YLROH		4		0.003117692907248636</span><br><span class="line">OFOKR		4		0.003117692907248636</span><br><span class="line">BNRSN		3		0.002338269680436477</span><br><span class="line">YOFOK		3		0.002338269680436477</span><br><span class="line">YNKOS		3		0.002338269680436477</span><br><span class="line">SNKOH		3		0.002338269680436477</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_6.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6元字母 出现次数 	频率</span><br><span class="line">YNKOSN		3		0.002338269680436477</span><br><span class="line">XVRUVO		3		0.002338269680436477</span><br><span class="line">OFOKRI		3		0.002338269680436477</span><br><span class="line">YOFOKR		3		0.002338269680436477</span><br><span class="line">SNDYLR		3		0.002338269680436477</span><br><span class="line">FOKRIR		3		0.002338269680436477</span><br><span class="line">GYWROH		3		0.002338269680436477</span><br><span class="line">NKOSNY		3		0.002338269680436477</span><br><span class="line">YVUSNR		2		0.001558846453624318</span><br><span class="line">KOHBNR		2		0.001558846453624318</span><br><span class="line">SNYGYS		2		0.001558846453624318</span><br><span class="line">GKJYKO		2		0.001558846453624318</span><br><span class="line">YBNRSY		2		0.001558846453624318</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>很容易推断出<code>R = i</code>, <code>KOH = ang</code>, <code>BN = zh / sh</code>等.</p>
<p>但随即我发现, 根本没有必要根据词频猜测破解密码表.</p>
<p><code>pinyin.txt</code>, 也就是《聊斋志异》全文的拼音,<br><strong>只有<code>112w</code>个字符</strong>.</p>
<p>因此, 我们可以直接<code>O(N)</code>暴力匹配密文片段!</p>
<p>对于这样的密文片段:<br><font color=#00FFFF>BNR</font>OFEKLR<font color=#00FFFF>BNR</font>UR<font color=#00FFFF>BNR</font>JYKOSNKOHCKOCYBNKOMKO<font color=#00FFFF>BNR</font></p>
<p>它的<code>pattern</code>也就是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABC &#123;6X&#125; ABC &#123;2X&#125; ABC &#123;21X&#125; ABC </span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">1130000</span>];</span><br><span class="line"><span class="type">int</span> indent[<span class="number">5</span>] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">21</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">_Bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="comment">// 没错, 很暴力, 主打一个能跑就行</span></span><br><span class="line">    <span class="keyword">return</span> (str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line"></span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line"></span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;pinyin.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    fgets(str, <span class="number">1130000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str) - <span class="number">100</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check(i))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; i + <span class="number">100</span>; ++j)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在原文中有唯一匹配, 对应的原文拼音为:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZHINVDAYIZHIRIZHIJUANSHANGFANFUZHANWANZHI</span><br></pre></td></tr></table></figure></div>
<p>在<code>pinyin.txt</code>中搜索该串字符, 很容易找出密文对应的原文拼音为:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">YICIYANZHIYEXINCHANGRANZISHIERXISHIMEIRENMEIMURUSHENGBEIYINYINYOUXIZIYUNZHINVDAYIZHIRIZHIJUANSHANGFANFUZHANWANZHIWANGSHIQINYIRIFANGZHUMUJIANMEIRENHUZHEYAOQIZUOJUANSHANGWEIXIAOLANGJINGJUEFUBAIANXIAJIQIYIYINGCHIYIYIHAIYOUKOUZHIXIAJITINGTINGWANRANJUEDAIZHISHUBAIWENHESHENMEIRENXIAOYUEQIEYANSHIZIRUYUJUNGUXIANGZHIYIJIURICHUIQINGPANTUOBUYIZHIKONGQIANZAIXIAWUFUYOUDUXINGURENZHELANGXISUIYUQINCHURANZHENXIJIANQINAIBEIZHIERBUZHIWEIRENMEIDUBISHINVZUOQICENVJIEWUDUBUTINGNVYUEJUNSUOYIBUNENGTENGDAZHETUYIDUERSHIGUANCHUNQIUBANGSHANGDURUJUNZHEJIRENRUOBUTINGQIEXINGQUYILANGZANCONGZHISHAOQINGWANGQIJIAOYINSONGFUQIYUKESUONVBUZHISUOZAISHENZHISANGSHIZHUERDAOZHISHUWUYINGJIHUYINVSUOYINCHUQUHANSHUXIJIANZHIZHIZHIJIUCHUGUODEZHIHUZHIBUDONGFUYIAIZHUNVNAIXIAYUEJUNZAIBUTINGDANGXIANGYONGJUEYINSHIZHIQIPINGCHUPUZHIJURIYUAOXIERLANGYISHUBUSHUQUNVBUZAIZEQIEJUANLIULANKONGWEINVJUEYINQUHANSHUDIBAJUANZAHUNTASUOYIMIZHIYIRIDUHANNVZHIJINGBUZHIJUEHUDUZHIJIYANJUANERNVYIWANGYIDAJUMINGSOUZHUJUANMIAOBUKEDEJIRENGYUHANSHUBAJUANZHONGDEZHIYESHUBUSHUANGYINZAIBAIZHUSHIBUFUDUNVNAIXIAYUZHIYIYUESANRIBUGONGDANGFUQUZHISANRIHUYIJUYINGNVERZINVNAIXISHOUYIXIANSUOXIANWURIGONGYIQULANGSHOUYINGMUZHUWUXIATAJIJIUZHISUISHOUYINGJIEBUJUEGUWUNVNAIRIYUYINBOLANGSUILEERWANGDUNVYOUZONGZHICHUMENSHIJIEKEYOUCITITANGZHIMINGBAOZHUNVYUEZIKEYICHUERSHIYI</span><br></pre></td></tr></table></figure></div>

<h4 id="根据拼音获取原文"><a href="#根据拼音获取原文" class="headerlink" title="根据拼音获取原文"></a>根据拼音获取原文</h4><p>水平过低, 一眼看不出原文.<br>只能写代码跑了…<br>废物GPT-4o写不出能跑的代码, 还得我自己写.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">file: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 读取原文, 并过滤掉非中文字符</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>, errors = <span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    text = re.sub(<span class="string">r&quot;[^\u4e00-\u9fa5]&quot;</span>, <span class="string">&quot;&quot;</span>, text)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPinyin</span>(<span class="params">text: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 文本转拼音</span></span><br><span class="line">    pinyin:<span class="built_in">list</span> = lazy_pinyin(text)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(pinyin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">pattern: <span class="built_in">str</span>, text: <span class="built_in">str</span>, length:<span class="built_in">int</span> = <span class="number">14</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text) - length + <span class="number">1</span>):</span><br><span class="line">        tmp = text[i : i + length]</span><br><span class="line">        tmp_pinyin = getPinyin(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp_pinyin == pattern: <span class="keyword">return</span> tmp</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;匹配失败.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    file = <span class="string">&quot;sample.txt&quot;</span></span><br><span class="line">    pattern = <span class="string">&quot;zhinvdayizhirizhijuanshangfanfuzhanwanzhi&quot;</span> <span class="comment"># 14~15个拼音, 取决于juan还是ju an</span></span><br><span class="line">    text = getText(file)</span><br><span class="line">    <span class="keyword">match</span> = find(pattern, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Result:  <span class="subst">&#123;<span class="keyword">match</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Result:  织女大异之日置卷上反复瞻玩至</span><br></pre></td></tr></table></figure></div>
<p>很容易就定位到原文了:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">...以此验之耶？”心怅然自失。而细视美人，眉目如生；背隐隐有细字云：“织女。”大异之。日置卷上，反复瞻玩，至忘食寝。一日方注目间，美人忽折腰起，坐卷上微笑。郎惊绝，伏拜案下。既起，已盈尺矣。益骇，又叩之。下几亭亭，宛然绝代之姝。拜问：“何神？”美人笑曰：“妾颜氏，字如玉，君固相知已久。日垂青盼，脱不一至，恐千载下无复有笃信古人者。”郎喜，遂与寝处。然枕席间亲爱倍至，而不知为人。</span><br><span class="line"></span><br><span class="line">每读必使女坐其侧。女戒勿读，不听；女曰：“君所以不能腾达者，徒以读耳。试观春秋榜上，读如君者几人？若不听，妾行去矣。”郎暂从之。少顷忘其教，吟诵复起。逾刻索女，不知所在。神志丧失，嘱而祷之，殊无影迹。忽忆女所隐处，取《汉书》细检之，直至旧处，果得之。呼之不动，伏以哀祝。女乃下曰：“君再不听，当相永绝！”因使治棋枰、樗蒲之具，日与遨戏。而郎意殊不属。觑女不在，则窃卷流览。恐为女觉，阴取《汉书》第八卷，杂混他所以迷之。一日读酣，女至竟不之觉；忽睹之，急掩卷而女已亡矣。大惧，冥搜诸卷、渺不可得；既，仍于《汉书》八卷中得之，页数不爽。因再拜祝，矢不复读。</span><br><span class="line"></span><br><span class="line">女乃下，与之弈，曰：“三日不工，当复去。”至三日，忽一局赢女二子。女乃喜，授以弦索，限五日工一曲。郎手营目注，无暇他及；久之随手应节，不觉鼓舞。女乃日与饮博，郎遂乐而忘读，女又纵之出门，使结客，由此倜傥之名暴著。女曰：“子可以出而试矣。”</span><br></pre></td></tr></table></figure></div>
<p>摘自<code>《聊斋志异》卷十一·书痴</code></p>
<h4 id="求密码表"><a href="#求密码表" class="headerlink" title="求密码表"></a>求密码表</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;en.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    en = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;de.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    de = f.read()</span><br><span class="line"></span><br><span class="line">key_list = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(en)):</span><br><span class="line">    <span class="keyword">if</span> en[i] <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">        key_list[en[i]] = de[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> de[i] != key_list[en[i]]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error at position <span class="subst">&#123;i&#125;</span>: The mapping is <span class="subst">&#123;en[i]&#125;</span> -&gt; <span class="subst">&#123;key_list[en[i]]&#125;</span> but <span class="subst">&#123;de[i]&#125;</span> is expected.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>, <span class="number">91</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(i) <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">&quot;not found&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span> -&gt; <span class="subst">&#123;key_list[<span class="built_in">chr</span>(i)]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error at position 545: The mapping is N -&gt; H but X is expected.</span><br><span class="line">Error at position 546: The mapping is K -&gt; A but I is expected.</span><br><span class="line">A -&gt; P</span><br><span class="line">B -&gt; Z</span><br><span class="line">C -&gt; F</span><br><span class="line">D -&gt; O</span><br><span class="line">E -&gt; D</span><br><span class="line">F -&gt; V</span><br><span class="line">G -&gt; B</span><br><span class="line">H -&gt; G</span><br><span class="line">I -&gt; X</span><br><span class="line">J -&gt; J</span><br><span class="line">K -&gt; A</span><br><span class="line">L -&gt; Y</span><br><span class="line">M -&gt; W</span><br><span class="line">N -&gt; H</span><br><span class="line">O -&gt; N</span><br><span class="line">P -&gt; Q</span><br><span class="line">Q -&gt; K</span><br><span class="line">R -&gt; I</span><br><span class="line">S -&gt; S</span><br><span class="line">T -&gt; L</span><br><span class="line">U -&gt; R</span><br><span class="line">V -&gt; E</span><br><span class="line">W -&gt; T</span><br><span class="line">X -&gt; M</span><br><span class="line">Y -&gt; U</span><br><span class="line">Z -&gt; C</span><br></pre></td></tr></table></figure></div>
<p>有2个字符没对应上, 应该是多音字导致的, 无伤大雅.</p>
<p>密码表如下:</p>
<table>
<thead>
<tr>
<th>映射前</th>
<th>映射后</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>P</td>
</tr>
<tr>
<td>B</td>
<td>Z</td>
</tr>
<tr>
<td>C</td>
<td>F</td>
</tr>
<tr>
<td>D</td>
<td>O</td>
</tr>
<tr>
<td>E</td>
<td>D</td>
</tr>
<tr>
<td>F</td>
<td>V</td>
</tr>
<tr>
<td>G</td>
<td>B</td>
</tr>
<tr>
<td>H</td>
<td>G</td>
</tr>
<tr>
<td>I</td>
<td>X</td>
</tr>
<tr>
<td>J</td>
<td>J</td>
</tr>
<tr>
<td>K</td>
<td>A</td>
</tr>
<tr>
<td>L</td>
<td>Y</td>
</tr>
<tr>
<td>M</td>
<td>W</td>
</tr>
<tr>
<td>N</td>
<td>H</td>
</tr>
<tr>
<td>O</td>
<td>N</td>
</tr>
<tr>
<td>P</td>
<td>Q</td>
</tr>
<tr>
<td>Q</td>
<td>K</td>
</tr>
<tr>
<td>R</td>
<td>I</td>
</tr>
<tr>
<td>S</td>
<td>S</td>
</tr>
<tr>
<td>T</td>
<td>L</td>
</tr>
<tr>
<td>U</td>
<td>R</td>
</tr>
<tr>
<td>V</td>
<td>E</td>
</tr>
<tr>
<td>W</td>
<td>T</td>
</tr>
<tr>
<td>X</td>
<td>M</td>
</tr>
<tr>
<td>Y</td>
<td>U</td>
</tr>
<tr>
<td>Z</td>
<td>C</td>
</tr>
</tbody></table>
<h4 id="找出多音字"><a href="#找出多音字" class="headerlink" title="找出多音字"></a>找出多音字</h4><p>学长希望找到这个多音字, 随便写了份代码:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_text</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    text = re.sub(<span class="string">r&quot;[^\u4e00-\u9fa5]&quot;</span>, <span class="string">&quot;&quot;</span>, text)  <span class="comment"># 只保留中文字符</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>():</span><br><span class="line">    text = clean_text(<span class="string">&quot;ans.txt&quot;</span>)</span><br><span class="line">    pinyin_list = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        ipinyin:<span class="built_in">list</span> = lazy_pinyin([i])</span><br><span class="line">        pinyin_list += <span class="string">&quot;&quot;</span>.join(ipinyin)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(pinyin_list) &gt;= <span class="number">540</span> <span class="keyword">and</span> <span class="built_in">len</span>(pinyin_list) &lt;= <span class="number">550</span>): <span class="built_in">print</span>(i, end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    go()</span><br></pre></td></tr></table></figure></div>
<p>输出<code>听 妾 行</code>, 可知<code>行</code>是多音字. <code>lazy_pinyin</code>提供的拼音为<code>XING</code>而密文里的拼音是<code>HANG</code>. 显然正确发音应为<code>XING</code>.</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Adworld Misc Writeups</title>
    <url>/2025/01/11/Adworld-Misc-writeups/</url>
    <content><![CDATA[<p>记录<a class="link"   href="https://adworld.xctf.org.cn/" >Adworld<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> Misc的个人writeups.</p>
<hr>
<h4 id="Banmabanma"><a href="#Banmabanma" class="headerlink" title="Banmabanma"></a>Banmabanma</h4><p>解压附件得到<code>斑马斑马.png</code>.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/1.png"
                      alt="斑马斑马.png"
                ></p>
<p>显然, 这是一个条形码, 要使用专门的工具来识别.</p>
<p>把图片扔到<a class="link"   href="https://online-barcode-reader.inliteresearch.com/" >Barcode Reader<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>,</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/2.png"
                      alt="识别结果"
                ></p>
<p>Flag: <code>flag&#123;TENSHINE&#125;</code></p>
<hr>
<h4 id="适合作为桌面"><a href="#适合作为桌面" class="headerlink" title="适合作为桌面"></a>适合作为桌面</h4><p>解压附件得到<code>1.png</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/4.png"
                      alt="适合作为桌面"
                ></p>
<p>图像隐写, 先上<code>StegSolve</code>.</p>
<p>发现<code>Red plane 1</code>藏了一张二维码:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/5.png"
                      alt="StegSolve结果"
                ></p>
<p>解码得到如下文本:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure></div>

<p>编写脚本, 把十六进制字符串转换为文本:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.txt是存放十六进制字符串的文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    hex_str = f.read()</span><br><span class="line"></span><br><span class="line">byte_stream = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(byte_stream)</span><br></pre></td></tr></table></figure></div>

<p>得到的<code>2.txt</code>并非纯文本文件, 用<code>file</code>命令判断文件类型:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">file 2.txt</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/6.png"
                      alt="file结果"
                ></p>
<p>是个<code>pyc</code>文件, 用python2运行了一下, 什么输出都没有, 意料之中.</p>
<p>使用<a class="link"   href="https://tool.lu/pyc/" >在线工具<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>反编译:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 2.7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="built_in">str</span> = [</span><br><span class="line">        <span class="number">102</span>,</span><br><span class="line">        <span class="number">108</span>,</span><br><span class="line">        <span class="number">97</span>,</span><br><span class="line">        <span class="number">103</span>,</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">97</span>,</span><br><span class="line">        <span class="number">53</span>,</span><br><span class="line">        <span class="number">55</span>,</span><br><span class="line">        <span class="number">48</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">50</span>,</span><br><span class="line">        <span class="number">48</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">53</span>,</span><br><span class="line">        <span class="number">52</span>,</span><br><span class="line">        <span class="number">52</span>,</span><br><span class="line">        <span class="number">49</span>,</span><br><span class="line">        <span class="number">101</span>,</span><br><span class="line">        <span class="number">55</span>,</span><br><span class="line">        <span class="number">125</span>]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(i)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure></div>

<p>还好没再套一层Crypto, 调用flag()就能拿到flag了.</p>
<p>Flag: <code>flag&#123;38a57032085441e7&#125;</code></p>
<p><del>这题难度只有1? 本萌新瑟瑟发抖.</del></p>
<hr>
<h4 id="心仪的公司"><a href="#心仪的公司" class="headerlink" title="心仪的公司"></a>心仪的公司</h4><p>解压附件得到<code>webshell.pcapng</code>.</p>
<p>看来是道流量审计题.</p>
<p>看到那一堆包就头大, 决定先用<code>strings</code>看看有没有什么好玩的字符串.</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">strings webshell.pcapng | grep &#123;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/3.png"
                      alt="strings结果"
                ></p>
<p>没想到, 直接就秒了?</p>
<p>Flag: <code>fl4g:&#123;ftop_Is_Waiting_4_y&#125;</code></p>
<hr>
<h4 id="pure-color"><a href="#pure-color" class="headerlink" title="pure_color"></a>pure_color</h4><p>附件就是一张图. <em>(以下并非空白界面, 真的有一张白色的图. 建议在Dark Mode下阅读此writeup)</em></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/7.png"
                      alt="pure_color.png"
                ></p>
<p>上<code>StegSolve</code>.</p>
<p>切换到<code>Blue plane 0</code>:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/8.png"
                      alt="StegSolve结果"
                ></p>
<p>这…对吗? 感觉像是假flag啊.</p>
<p><del>而且还有语法错误.</del></p>
<p>但提交通过了, 确实是这个flag.</p>
<p>Flag: <code>flag&#123;true_steganographers_doesnt_need_any_tools&#125;</code></p>
<hr>
<h4 id="2017-Dating-in-Singapore"><a href="#2017-Dating-in-Singapore" class="headerlink" title="2017_Dating_in_Singapore"></a>2017_Dating_in_Singapore</h4><p>题目描述:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">01081522291516170310172431-050607132027262728-0102030209162330-02091623020310090910172423-02010814222930-0605041118252627-0203040310172431-0102030108152229151617-04050604111825181920-0108152229303124171003-261912052028211407-04051213192625</span><br></pre></td></tr></table></figure></div>

<p>解压附件得<code>Year 2017 Calendar – Singapore.pdf</code>:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/9.png"
                      alt="PDF"
                ></p>
<p>第一眼, 感觉非常诡异:</p>
<ul>
<li>这些乱七八糟的数字是什么意思?</li>
<li>给我一张日历干啥?</li>
</ul>
<p>但再仔细观察就可以发现, 这些数字被<code>-</code>划分为<strong>12</strong>组, 每组的数字个数都是<strong>偶数</strong>, 且如果按两位来读取数字, 这些数字的范围在<strong>01~31</strong>之间.</p>
<p>也就是说, 这些数字很可能代表日期, 第k组表示第k月.</p>
<p>在日历上找出这些日期, 发现是字符画:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/10.png"
                      alt="日期"
                ></p>
<p>Flag: <code>HITB&#123;CTFFUN&#125;</code></p>
<hr>
<h4 id="simple-transfer"><a href="#simple-transfer" class="headerlink" title="simple_transfer"></a>simple_transfer</h4><p>解压附件得到一个pcap文件.</p>
<p>和<strong>心仪的公司</strong>一样, 先strings查一下字符串, 没查出来.</p>
<p>打开<code>wireshark</code>分析流量, 发现全是<code>TCP</code>协议.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/11.png"
                      alt="协议分级"
                ></p>
<p>实在不想<del>(其实是不会)</del>分析这堆流量包, 既然查不到明文, 且结合题目名, 这些流量里很可能藏有文件.</p>
<p>直接<code>foremost</code>分离. (<code>binwalk</code>也行, 但<code>binwalk</code>似乎会把<code>PDF</code>文件再往下拆分, 这里用<code>foremost</code>更优.)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/12.png"
                      alt="提取结果"
                ></p>
<p>Flag: <code>HITB&#123;b3d0e380e9c39352c667307d010775ca&#125;</code></p>
<hr>
<h4 id="Training-Stegano-1"><a href="#Training-Stegano-1" class="headerlink" title="Training-Stegano-1"></a>Training-Stegano-1</h4><p>附件是一张只有<code>102B</code>的<code>bmp</code>图片, 4x4像素.</p>
<p>用<code>010 Editor</code>看看.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/13.png"
                      alt="010 Editor"
                ></p>
<p>密码是<code>steganoI</code>. 这个是什么的密码?</p>
<p>印象中没见过<code>bmp</code>的文件嵌入, 且这个文件大小不可能是密文或者文件嵌入, 试着直接提交<code>steganoI</code>, 显示正确.</p>
<p>Flag: <code>steganoI</code></p>
<hr>
<h4 id="can-has-stdio"><a href="#can-has-stdio" class="headerlink" title="can_has_stdio?"></a>can_has_stdio?</h4><p>解压附件得到文件<code>misc50</code>.</p>
<p>没有后缀, 用<code>file</code>命令确定文件类型:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/14.png"
                      alt="file结果"
                ></p>
<p>既然是个文本, 那就直接<code>cat</code>看看.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/15.png"
                      alt="cat结果"
                ></p>
<div class="code-container" data-rel="Brainfuck"><figure class="iseeu highlight brainfuck"><table><tr><td class="code"><pre><span class="line">                                                                              </span><br><span class="line">                                                                              </span><br><span class="line">                                      <span class="literal">+</span>                                       </span><br><span class="line">                                     <span class="literal">++</span>                                       </span><br><span class="line">                                     <span class="literal">+++</span>                                      </span><br><span class="line">                                    <span class="literal">++</span><span class="title">[</span>&gt;                                      </span><br><span class="line">                                    <span class="literal">+</span>&gt;<span class="literal">++</span>&gt;                                     </span><br><span class="line">                                   <span class="literal">+++</span>&gt;<span class="literal">++</span>                                     </span><br><span class="line">                                   <span class="literal">++</span>&gt;<span class="literal">++++</span>                                    </span><br><span class="line">                                  <span class="literal">+</span>&gt;<span class="literal">++++++</span>                                    </span><br><span class="line">                                  &gt;<span class="literal">+++++++</span>&gt;                                   </span><br><span class="line">                                 <span class="literal">++++++++</span>&gt;<span class="literal">+</span>                                   </span><br><span class="line">                                 <span class="literal">++++++++</span>&gt;<span class="literal">++</span>                                  </span><br><span class="line">                                <span class="literal">++++++++</span>&gt;<span class="literal">+++</span>                                  </span><br><span class="line">                                <span class="literal">++++++++</span>&gt;<span class="literal">++++</span>                                 </span><br><span class="line">          <span class="literal">++++++++</span>&gt;<span class="literal">+++++++++++++</span>&gt;<span class="literal">++++++++++++++</span>&gt;<span class="literal">+++++++++++++++</span>&gt;<span class="literal">++</span>            </span><br><span class="line">            <span class="literal">++++++++++++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;              </span><br><span class="line">              &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;                </span><br><span class="line">                &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">-</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;                  </span><br><span class="line">                  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+++</span><span class="string">.</span><span class="literal">---</span>&lt;&lt;&lt;&lt;&lt;&lt;                    </span><br><span class="line">                    &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">---</span><span class="string">.</span><span class="literal">+++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;                      </span><br><span class="line">                      &lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+++</span><span class="string">.</span><span class="literal">---</span>&lt;&lt;&lt;&lt;&lt;                        </span><br><span class="line">                        &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;&lt;                          </span><br><span class="line">                          &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                            </span><br><span class="line">                          &gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;                            </span><br><span class="line">                          &lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">-</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;                            </span><br><span class="line">                         &lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;&lt;                           </span><br><span class="line">                         &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span>                           </span><br><span class="line">                        <span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                          </span><br><span class="line">                        <span class="literal">+++</span><span class="string">.</span><span class="literal">---</span>&lt;&lt;&lt;&lt;&lt;&lt;   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;                          </span><br><span class="line">                       &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;       &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;                         </span><br><span class="line">                       &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;           &gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;                         </span><br><span class="line">                      &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;               &lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;                        </span><br><span class="line">                      &gt;&gt;&gt;&gt;&gt;&gt;                    &gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>                        </span><br><span class="line">                     &lt;&lt;&lt;&lt;&lt;                        &lt;&lt;&lt;&lt;&lt;                       </span><br><span class="line">                     &lt;&lt;&lt;                            &lt;&gt;&gt;                       </span><br><span class="line">                    &gt;&gt;                                &gt;&gt;                      </span><br><span class="line">                                                                              </span><br><span class="line">                                                                              </span><br><span class="line">                                                                              </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">++</span><span class="string">.</span><span class="literal">--</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">---</span><span class="string">.</span><span class="literal">+++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">-</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="string">.</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">++</span><span class="string">.</span><span class="literal">--</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">--</span><span class="string">.</span><span class="literal">++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">-</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="literal">---</span><span class="string">.</span><span class="literal">+++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<span class="string">.</span></span><br></pre></td></tr></table></figure></div>

<p>随便找个<a class="link"   href="https://ctf.bugku.com/tool/brainfuck" >Brainfuck解释器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, 复制粘贴即可拿到flag.</p>
<p>Flag: <code>flag&#123;esolangs_for_fun_and_profit&#125;</code></p>
<hr>
<h4 id="Erik-Baleog-and-Olaf-TODO"><a href="#Erik-Baleog-and-Olaf-TODO" class="headerlink" title="Erik-Baleog-and-Olaf (TODO)"></a>Erik-Baleog-and-Olaf (TODO)</h4><p>解压附件得到文件<code>stego100</code>, 用<code>file</code>确定是<code>PNG</code>文件:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/16.png"
                      alt="stego100.png"
                ></p>
<p>我先用<code>010 Editor</code>看看文件尾有没有藏东西:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/17.png"
                      alt="010 Editor"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://i.imgur.com/22kUrzm.png</span><br></pre></td></tr></table></figure></div>

<p>访问这个URL, 来到这样一个网站:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/18.png"
                      alt="Web"
                ></p>
<p>emmm, 没看出这个<code>hint</code>到底是啥意思, 先把这个网页放一边, 用<code>StegSolve</code>看看.</p>
<p>在<code>Green plane 1</code>下, 可以看到中间有一个二维码:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/-writeups/19.png"
                      alt="StegSolve结果"
                ></p>
<p>但右下角未能完整显示, 扫不出来.</p>
<p>在<code>Random colour map 1/2/3</code>反复刷, 也还是扫不出来, 难崩.</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Misc</tag>
        <tag>Adworld</tag>
      </tags>
  </entry>
  <entry>
    <title>Operator Precedence</title>
    <url>/2025/01/13/Operator-Precedence/</url>
    <content><![CDATA[<h5 id="25-XCPC-寒假集训班Day1-练习题-E题"><a href="#25-XCPC-寒假集训班Day1-练习题-E题" class="headerlink" title="25 XCPC 寒假集训班Day1 练习题 E题"></a>25 XCPC 寒假集训班Day1 练习题 E题</h5><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img lazyload="" src="/images/loading.svg" data-src="/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/cedence/1.png" alt="题目描述"></p>
<h4 id="个人解答"><a href="#个人解答" class="headerlink" title="个人解答"></a>个人解答</h4><p>题目不允许出现因子<code>0</code>, 那就配凑<code>1</code>, 尝试把除首项和末项外的因子全部配成<code>1</code>.</p>
<p>很容易想到构造:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.221ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12473.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(965.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(1410.2,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(1660.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2160.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(2604.9,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(3077.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4077.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4577.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(5022,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5272,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5772,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(6216.7,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(6688.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7689.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8189.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(8633.8,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(9050.4,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(10389.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(10833.8,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(11083.8,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></g></svg></mjx-container></p>
<p>这样一来, 题目的式子就变成了:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.752ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 14034.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(1222.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2410.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3410.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3910.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4299.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5121.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6121.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6621.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7233.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(8233.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9900.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(10956.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12144.5,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(12644.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></g></svg></mjx-container></p>
<p>直接令 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="7.293ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 3223.4 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1667.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2723.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> , 可以解出</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.244ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7622 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2799.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3188.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4010.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5010.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5510.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6121.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(7122,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<p>于是我们就得到了这样一个合法的构造:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.306ex;" xmlns="http://www.w3.org/2000/svg" width="37.323ex" height="5.742ex" role="img" focusable="false" viewBox="0 -1519.1 16496.9 2538.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,769.1)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(1222.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1611.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2433.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3433.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3933.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4545.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5545.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6045.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(6490,0)"><path data-c="A0" d=""></path></g><g data-mml-node="munder" transform="translate(6740,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="munder"><g data-mml-node="mrow"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(944.7,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(1416.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2417.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2917.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(3361.8,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(3611.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4111.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(4556.4,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(5028.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6028.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6528.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(6973.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(7390.2,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-619)"><path data-c="E152" d="M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z"></path><path data-c="E153" d="M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z" transform="translate(8112.2,0)"></path><g data-c="E156" transform="translate(3831.1,0)"><path data-c="E151" d="M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z"></path><path data-c="E150" d="M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z" transform="translate(450,0)"></path></g><svg width="3581.1" height="720" x="350" y="-300" viewBox="895.3 -300 3581.1 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(13.429,1)"></path></svg><svg width="3581.1" height="720" x="4631.1" y="-300" viewBox="895.3 -300 3581.1 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(13.429,1)"></path></svg></g></g></g><g data-mml-node="TeXAtom" transform="translate(1819.7,-1511.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">共</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2878,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3878,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(1167,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(1417,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2195,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2695,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15302.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(15746.9,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(15996.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></g></svg></mjx-container></p>
<p>做完了.</p>
<p>AC Code:</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, (n<span class="number">-2</span>) &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"2 -1 "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
</search>
