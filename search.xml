<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一道简单的单表代换加密</title>
    <url>/2024/12/19/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>学长的大作业, 感觉还挺有意思的, 遂记录之.</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知明文节选自《聊斋志异》, 转为拼音后进行<code>单表加密</code>, 现要根据密文进行解密. </p>
<p>密文如下:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRZRLKOBNRLVIROZNKOHUKOBRSNRVUIRSNRXVRUVOXVRXYUYSNVOHGVRLROLROLDYIRBRLYOBNROFEKLRBNRURBNRJYKOSNKOHCKOCYBNKOMKOBNRMKOHSNRPROLRURCKOHBNYXYJRKOXVRUVONYBNVLKDPRBYDJYKOSNKOHMVRIRKDTKOHJROHJYVCYGKRKOIRKJRPRLRLROHZNRLRLRNKRLDYQDYBNRIRKJRWROHWROHMKOUKOJYVEKRBNRSNYGKRMVONVSNVOXVRUVOIRKDLYVPRVLKOSNRBRUYLYJYOHYIRKOHBNRLRJRYURZNYRPROHAKOWYDGYLRBNRQDOHPRKOBKRIRKMYCYLDYEYIROHYUVOBNVTKOHIRSYRLYPROZNYUKOBNVOIRJRKOPROKRGVRBNRVUGYBNRMVRUVOXVREYGRSNROFBYDPRZVOFJRVMYEYGYWROHOFLYVJYOSYDLRGYOVOHWVOHEKBNVWYLREYVUSNRHYKOZNYOPRYGKOHSNKOHEYUYJYOBNVJRUVOUYDGYWROHPRVNKOHPYLRTKOHBKOZDOHBNRSNKDPROHMKOHPRJRKDLROSDOHCYPRLYQVSYDOFGYBNRSYDBKRSNVOBNRSKOHSNRBNYVUEKDBNRSNYMYLROHJRNYLROFSYDLROZNYPYNKOSNYIRJRKOBNRBNRBNRJRYZNYHYDEVBNRNYBNRGYEDOHCYLRKRBNYOFOKRIRKLYVJYOBKRGYWROHEKOHIRKOHLDOHJYVLROSNRBNRPRAROHZNYAYBNRJYURLYKDIRVUTKOHLRSNYGYSNYPYOFGYBKRBVPRVJYKOTRYTKOQDOHMVROFJYVLROPYNKOSNYERGKJYKOBKNYOWKSYDLRXRBNRLRUREYNKOOFBNRJROHGYBNRJYVNYEYBNRJRLKOJYKOVUOFLRMKOHLREKJYXROHSDYBNYJYKOXRKDGYQVEVJRUVOHLYNKOSNYGKJYKOBNDOHEVBNRLVSNYGYSNYKOHLROBKRGKRBNYSNRGYCYEYOFOKRIRKLYBNRLRLYVSKOURGYHDOHEKOHCYPYBNRSKOURNYLRJYLROHOFVUBROFOKRIRSNDYLRIRKOSYDIRKOMYURHDOHLRPYTKOHSNDYLROHXYBNYMYIRKWKJRJRYBNRSYRSNDYLROHJRVGYJYVHYMYOFOKRURLYLROGDTKOHSYRTVVUMKOHEYOFLDYBDOHBNRZNYXVOSNRJRVQVLDYZRWRWKOHBNRXROHGKDBNYOFLYVBRQVLRZNYVUSNRLR</span><br></pre></td></tr></table></figure></div>
<h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p>单表加密, 最常见的做法就是做词频分析.</p>
<p>如果是英文文本的话, 用<a class="link"   href="https://quipqiup.com/" >quipqiup<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>很快就能得解.</p>
<p>但这里是中文拼音, 似乎没有现成的工具, 那就老老实实做词频分析.</p>
<h4 id="统计聊斋全书的拼音词频"><a href="#统计聊斋全书的拼音词频" class="headerlink" title="统计聊斋全书的拼音词频"></a>统计聊斋全书的拼音词频</h4><p>首先要知道中文拼音的一般频率分布, 这里我直接网上找<a class="link"   href="https://www.isyd.net/books/37/" >《聊斋志异》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的txt文本.</p>
<p>去除前言什么的, 只留下小说部分, 保存txt为<code>sample.txt</code>, 运行如下代码 (GPT-4o)</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：读取文本文件并去除标点符号、空格等非中文字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_text</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    <span class="comment"># 使用正则表达式去除标点符号和非汉字字符</span></span><br><span class="line">    text = re.sub(<span class="string">r&#x27;[^\u4e00-\u9fa5]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, text)  <span class="comment"># 只保留中文字符</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：提取拼音声母和韵母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_initial_and_final</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="comment"># 声母，包括组合声母</span></span><br><span class="line">    initials = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;ch&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>]</span><br><span class="line">    finals = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;ei&#x27;</span>, <span class="string">&#x27;ui&#x27;</span>, <span class="string">&#x27;ao&#x27;</span>, <span class="string">&#x27;ou&#x27;</span>, <span class="string">&#x27;iu&#x27;</span>, <span class="string">&#x27;ie&#x27;</span>, <span class="string">&#x27;ve&#x27;</span>, <span class="string">&#x27;er&#x27;</span>, <span class="string">&#x27;an&#x27;</span>, <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;un&#x27;</span>, <span class="string">&#x27;ün&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;ang&#x27;</span>, <span class="string">&#x27;eng&#x27;</span>, <span class="string">&#x27;ing&#x27;</span>, <span class="string">&#x27;ong&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用pypinyin来获取拼音</span></span><br><span class="line">    pinyin_list = lazy_pinyin(word)</span><br><span class="line"></span><br><span class="line">    result = &#123;<span class="string">&#x27;initials&#x27;</span>: [], <span class="string">&#x27;finals&#x27;</span>: []&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pinyin_list:</span><br><span class="line">        <span class="comment"># 优先处理组合声母 zh, ch, sh</span></span><br><span class="line">        <span class="keyword">for</span> initial <span class="keyword">in</span> [<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;ch&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.startswith(initial):  <span class="comment"># 优先匹配组合声母</span></span><br><span class="line">                result[<span class="string">&#x27;initials&#x27;</span>].append(initial)</span><br><span class="line">                p = p[<span class="built_in">len</span>(initial):]  <span class="comment"># 去掉已经匹配的声母部分</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理剩余的普通声母</span></span><br><span class="line">        <span class="keyword">for</span> initial <span class="keyword">in</span> [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;r&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> p.startswith(initial):</span><br><span class="line">                result[<span class="string">&#x27;initials&#x27;</span>].append(initial)</span><br><span class="line">                p = p[<span class="built_in">len</span>(initial):]  <span class="comment"># 去掉已经匹配的声母部分</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理韵母</span></span><br><span class="line">        <span class="keyword">for</span> final <span class="keyword">in</span> finals:</span><br><span class="line">            <span class="keyword">if</span> p.endswith(final):</span><br><span class="line">                result[<span class="string">&#x27;finals&#x27;</span>].append(final)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：统计拼音声母和韵母的频率，同时生成拼音大写形式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_pinyin</span>(<span class="params">text</span>):</span><br><span class="line">    initial_counter = Counter()</span><br><span class="line">    final_counter = Counter()</span><br><span class="line">    pinyin_list = []  <span class="comment"># 存储拼音的大写形式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历文本中的每个字</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> text:</span><br><span class="line">        <span class="comment"># 提取每个字的声母和韵母</span></span><br><span class="line">        result = extract_initial_and_final(word)</span><br><span class="line">        <span class="comment"># 更新频率统计</span></span><br><span class="line">        initial_counter.update(result[<span class="string">&#x27;initials&#x27;</span>])</span><br><span class="line">        final_counter.update(result[<span class="string">&#x27;finals&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将拼音转换为大写并保存到pinyin_list</span></span><br><span class="line">        pinyin_list.extend(lazy_pinyin(word))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 拼音大写并去除分隔符</span></span><br><span class="line">    pinyin_text = <span class="string">&#x27;&#x27;</span>.join([p.upper() <span class="keyword">for</span> p <span class="keyword">in</span> pinyin_list])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按照频率从大到小排序</span></span><br><span class="line">    sorted_initials = initial_counter.most_common()  <span class="comment"># 返回排序后的声母</span></span><br><span class="line">    sorted_finals = final_counter.most_common()      <span class="comment"># 返回排序后的韵母</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sorted_initials, sorted_finals, pinyin_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    filename = <span class="string">&#x27;sample.txt&#x27;</span>  <span class="comment"># 中文文本文件路径</span></span><br><span class="line">    text = clean_text(filename)    <span class="comment"># 清理文本</span></span><br><span class="line">    </span><br><span class="line">    initial_freq, final_freq, pinyin_text = count_pinyin(text)  <span class="comment"># 统计声母和韵母频率，并获取拼音大写文本</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出声母频率，按频率从大到小排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;声母频数统计：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> initial, count <span class="keyword">in</span> initial_freq:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;initial&#125;</span>: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出韵母频率，按频率从大到小排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n韵母频数统计：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> final, count <span class="keyword">in</span> final_freq:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;final&#125;</span>: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将拼音大写文本写入到pinyin.txt文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pinyin.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> pinyin_file:</span><br><span class="line">        pinyin_file.write(pinyin_text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>得到如下排好序的频数表:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">声母频数统计：</span><br><span class="line">zh: 29643</span><br><span class="line">sh: 28934</span><br><span class="line">j: 28765</span><br><span class="line">q: 18439</span><br><span class="line">x: 18200</span><br><span class="line">b: 17367</span><br><span class="line">r: 14622</span><br><span class="line">d: 14158</span><br><span class="line">l: 13905</span><br><span class="line">g: 13834</span><br><span class="line">h: 13649</span><br><span class="line">z: 12934</span><br><span class="line">n: 11449</span><br><span class="line">f: 11430</span><br><span class="line">m: 10998</span><br><span class="line">s: 10567</span><br><span class="line">ch: 9473</span><br><span class="line">t: 7654</span><br><span class="line">c: 6688</span><br><span class="line">k: 5939</span><br><span class="line">p: 3464</span><br><span class="line"></span><br><span class="line">韵母频数统计：</span><br><span class="line">i: 111316</span><br><span class="line">u: 76706</span><br><span class="line">an: 32737</span><br><span class="line">e: 32492</span><br><span class="line">o: 26338</span><br><span class="line">ang: 19494</span><br><span class="line">en: 14397</span><br><span class="line">ing: 12005</span><br><span class="line">ong: 11837</span><br><span class="line">a: 11427</span><br><span class="line">eng: 11316</span><br><span class="line">in: 8509</span><br><span class="line">er: 6659</span><br><span class="line">un: 5059</span><br><span class="line">v: 3797</span><br></pre></td></tr></table></figure></div>
<h4 id="统计密文的词频"><a href="#统计密文的词频" class="headerlink" title="统计密文的词频"></a>统计密文的词频</h4><p>将密文保存到<code>ciphertext.txt</code>, 运行如下代码 (GPT-4o):</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNWordList</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成 N 元字符频率列表，并保存到文件。</span></span><br><span class="line"><span class="string">    :param n: N 元词，1表示单字母，2表示二元字母，3表示三元字母，依此类推</span></span><br><span class="line"><span class="string">    :return: 返回频率列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c_file = <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>)  <span class="comment"># 读取文件</span></span><br><span class="line">    c_text = c_file.read()  <span class="comment"># 读取文本</span></span><br><span class="line">    char_list = <span class="built_in">list</span>(c_text)  <span class="comment"># 转化为列表，每个字母为一个元素</span></span><br><span class="line"></span><br><span class="line">    word_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理 n = 1 的情况</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        word_list = char_list  <span class="comment"># 直接使用字符列表</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 获取 N 元字符组合</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(char_list) - n + <span class="number">1</span>):  <span class="comment"># 从当前位置开始取 n 个字符</span></span><br><span class="line">            temp_list = char_list[i:i + n]  <span class="comment"># 获取连续 n 个字符</span></span><br><span class="line">            temp_str = <span class="string">&quot;&quot;</span>.join(temp_list)  <span class="comment"># 将这些字符组合成一个字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp_str) &gt; <span class="number">1</span>:  <span class="comment"># 确保字符组合的长度大于1</span></span><br><span class="line">                word_list.append(temp_str)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 统计加密字符串中各个 N 元字符的出现次数</span></span><br><span class="line">    tempSet = <span class="built_in">set</span>(word_list)  <span class="comment"># 转为集合去重</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存为字典，key:字母组合，value:出现次数</span></span><br><span class="line">    tempDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tempSet:</span><br><span class="line">        tempDict[i] = word_list.count(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表排序, 以元组形式</span></span><br><span class="line">    dict_sorted = <span class="built_in">sorted</span>(tempDict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出到文件</span></span><br><span class="line">    file_name = <span class="string">f&#x27;fre_<span class="subst">&#123;n&#125;</span>.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n&#125;</span>元字母&quot;</span>, <span class="string">&quot;出现次数&quot;</span>, <span class="string">&quot;\t频率&quot;</span>, file=f)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dict_sorted:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">1</span>] &gt; <span class="number">1</span>:  <span class="comment"># 检查字母组合出现次数大于1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i[<span class="number">0</span>]&#125;</span>\t\t<span class="subst">&#123;i[<span class="number">1</span>]&#125;</span>\t\t<span class="subst">&#123;i[<span class="number">1</span>] / <span class="built_in">len</span>(c_text)&#125;</span>&quot;</span>, file=f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回频率列表</span></span><br><span class="line">    frequency_list = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> dict_sorted <span class="keyword">if</span> i[<span class="number">1</span>] &gt; <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> frequency_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，获取各个元词频</span></span><br><span class="line">getNWordList(<span class="number">1</span>)  <span class="comment"># 1 元词</span></span><br><span class="line">getNWordList(<span class="number">2</span>)  <span class="comment"># 2 元词</span></span><br><span class="line">getNWordList(<span class="number">3</span>)  <span class="comment"># 3 元词</span></span><br><span class="line">getNWordList(<span class="number">4</span>)  <span class="comment"># 4 元词</span></span><br><span class="line">getNWordList(<span class="number">5</span>)  <span class="comment"># 5 元词</span></span><br><span class="line">getNWordList(<span class="number">6</span>)  <span class="comment"># 6 元词</span></span><br></pre></td></tr></table></figure></div>
<p>得到如下结果 (只截取部分):</p>
<p>fre_1.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1元字母 出现次数 	频率</span><br><span class="line">R		197		0.15354637568199533</span><br><span class="line">Y		148		0.11535463756819954</span><br><span class="line">O		141		0.10989867498051442</span><br><span class="line">N		99		0.07716289945440374</span><br><span class="line">K		98		0.07638347622759158</span><br><span class="line">V		68		0.05300077942322681</span><br><span class="line">H		62		0.048324240062353856</span><br><span class="line">B		62		0.048324240062353856</span><br><span class="line">L		62		0.048324240062353856</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_2.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2元字母 出现次数 	频率</span><br><span class="line">KO		58		0.04520654715510522</span><br><span class="line">OH		56		0.043647700701480906</span><br><span class="line">BN		45		0.03507404520654715</span><br><span class="line">NR		44		0.034294621979735</span><br><span class="line">LR		37		0.028838659392049885</span><br><span class="line">RO		35		0.027279812938425563</span><br><span class="line">NY		30		0.02338269680436477</span><br><span class="line">SN		30		0.02338269680436477</span><br><span class="line">IR		21		0.01636788776305534</span><br><span class="line">RL		20		0.01558846453624318</span><br><span class="line">RK		20		0.01558846453624318</span><br><span class="line">JY		20		0.01558846453624318</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_3.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3元字母 出现次数 	频率</span><br><span class="line">BNR		32		0.02494154325798909</span><br><span class="line">KOH		24		0.018706157443491817</span><br><span class="line">ROH		18		0.014029618082618862</span><br><span class="line">LRO		14		0.010911925175370226</span><br><span class="line">YBN		14		0.010911925175370226</span><br><span class="line">RBN		12		0.009353078721745909</span><br><span class="line">YLR		12		0.009353078721745909</span><br><span class="line">IRK		12		0.009353078721745909</span><br><span class="line">SNR		11		0.00857365549493375</span><br><span class="line">RSN		10		0.00779423226812159</span><br><span class="line">NKO		10		0.00779423226812159</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_4.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4元字母 出现次数 	频率</span><br><span class="line">YBNR		10		0.00779423226812159</span><br><span class="line">RBNR		9		0.007014809041309431</span><br><span class="line">JYKO		7		0.005455962587685113</span><br><span class="line">BNRS		7		0.005455962587685113</span><br><span class="line">YLRO		6		0.004676539360872954</span><br><span class="line">RUVO		6		0.004676539360872954</span><br><span class="line">TKOH		6		0.004676539360872954</span><br><span class="line">KOSN		6		0.004676539360872954</span><br><span class="line">RIRK		6		0.004676539360872954</span><br><span class="line">BNRJ		6		0.004676539360872954</span><br><span class="line">NRLR		5		0.003897116134060795</span><br><span class="line">KOHS		5		0.003897116134060795</span><br><span class="line">OBNR		5		0.003897116134060795</span><br><span class="line">NKOH		5		0.003897116134060795</span><br><span class="line">OHBN		5		0.003897116134060795</span><br><span class="line">LROH		5		0.003897116134060795</span><br><span class="line">WROH		5		0.003897116134060795</span><br><span class="line">BNRL		5		0.003897116134060795</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_5.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5元字母 出现次数 	频率</span><br><span class="line">OHBNR		4		0.003117692907248636</span><br><span class="line">VRUVO		4		0.003117692907248636</span><br><span class="line">KOHSN		4		0.003117692907248636</span><br><span class="line">YLROH		4		0.003117692907248636</span><br><span class="line">OFOKR		4		0.003117692907248636</span><br><span class="line">BNRSN		3		0.002338269680436477</span><br><span class="line">YOFOK		3		0.002338269680436477</span><br><span class="line">YNKOS		3		0.002338269680436477</span><br><span class="line">SNKOH		3		0.002338269680436477</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>fre_6.txt</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6元字母 出现次数 	频率</span><br><span class="line">YNKOSN		3		0.002338269680436477</span><br><span class="line">XVRUVO		3		0.002338269680436477</span><br><span class="line">OFOKRI		3		0.002338269680436477</span><br><span class="line">YOFOKR		3		0.002338269680436477</span><br><span class="line">SNDYLR		3		0.002338269680436477</span><br><span class="line">FOKRIR		3		0.002338269680436477</span><br><span class="line">GYWROH		3		0.002338269680436477</span><br><span class="line">NKOSNY		3		0.002338269680436477</span><br><span class="line">YVUSNR		2		0.001558846453624318</span><br><span class="line">KOHBNR		2		0.001558846453624318</span><br><span class="line">SNYGYS		2		0.001558846453624318</span><br><span class="line">GKJYKO		2		0.001558846453624318</span><br><span class="line">YBNRSY		2		0.001558846453624318</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>很容易推断出<code>R = i</code>, <code>KOH = ang</code>, <code>BN = zh / sh</code>等.</p>
<p>但随即我发现, 根本没有必要根据词频猜测破解密码表.</p>
<p><code>pinyin.txt</code>, 也就是《聊斋志异》全文的拼音,<br><strong>只有<code>112w</code>个字符</strong>.</p>
<p>因此, 我们可以直接<code>O(N)</code>暴力匹配密文片段!</p>
<p>对于这样的密文片段:<br><font color=#00FFFF>BNR</font>OFEKLR<font color=#00FFFF>BNR</font>UR<font color=#00FFFF>BNR</font>JYKOSNKOHCKOCYBNKOMKO<font color=#00FFFF>BNR</font></p>
<p>它的<code>pattern</code>也就是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABC &#123;6X&#125; ABC &#123;2X&#125; ABC &#123;21X&#125; ABC </span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">1130000</span>];</span><br><span class="line"><span class="type">int</span> indent[<span class="number">5</span>] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">21</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">_Bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="comment">// 没错, 很暴力, 主打一个能跑就行</span></span><br><span class="line">    <span class="keyword">return</span> (str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i] == str[i+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line"></span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">1</span>] == str[i+<span class="number">1</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line"></span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>] &amp;&amp;</span><br><span class="line">           str[i+<span class="number">2</span>] == str[i+<span class="number">2</span>+indent[<span class="number">0</span>]+<span class="number">3</span>+indent[<span class="number">1</span>]+<span class="number">3</span>+indent[<span class="number">2</span>]+<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;pinyin.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    fgets(str, <span class="number">1130000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str) - <span class="number">100</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check(i))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; i + <span class="number">100</span>; ++j)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在原文中有唯一匹配, 对应的原文拼音为:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZHINVDAYIZHIRIZHIJUANSHANGFANFUZHANWANZHI</span><br></pre></td></tr></table></figure></div>
<p>在<code>pinyin.txt</code>中搜索该串字符, 很容易找出密文对应的原文拼音为:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">YICIYANZHIYEXINCHANGRANZISHIERXISHIMEIRENMEIMURUSHENGBEIYINYINYOUXIZIYUNZHINVDAYIZHIRIZHIJUANSHANGFANFUZHANWANZHIWANGSHIQINYIRIFANGZHUMUJIANMEIRENHUZHEYAOQIZUOJUANSHANGWEIXIAOLANGJINGJUEFUBAIANXIAJIQIYIYINGCHIYIYIHAIYOUKOUZHIXIAJITINGTINGWANRANJUEDAIZHISHUBAIWENHESHENMEIRENXIAOYUEQIEYANSHIZIRUYUJUNGUXIANGZHIYIJIURICHUIQINGPANTUOBUYIZHIKONGQIANZAIXIAWUFUYOUDUXINGURENZHELANGXISUIYUQINCHURANZHENXIJIANQINAIBEIZHIERBUZHIWEIRENMEIDUBISHINVZUOQICENVJIEWUDUBUTINGNVYUEJUNSUOYIBUNENGTENGDAZHETUYIDUERSHIGUANCHUNQIUBANGSHANGDURUJUNZHEJIRENRUOBUTINGQIEXINGQUYILANGZANCONGZHISHAOQINGWANGQIJIAOYINSONGFUQIYUKESUONVBUZHISUOZAISHENZHISANGSHIZHUERDAOZHISHUWUYINGJIHUYINVSUOYINCHUQUHANSHUXIJIANZHIZHIZHIJIUCHUGUODEZHIHUZHIBUDONGFUYIAIZHUNVNAIXIAYUEJUNZAIBUTINGDANGXIANGYONGJUEYINSHIZHIQIPINGCHUPUZHIJURIYUAOXIERLANGYISHUBUSHUQUNVBUZAIZEQIEJUANLIULANKONGWEINVJUEYINQUHANSHUDIBAJUANZAHUNTASUOYIMIZHIYIRIDUHANNVZHIJINGBUZHIJUEHUDUZHIJIYANJUANERNVYIWANGYIDAJUMINGSOUZHUJUANMIAOBUKEDEJIRENGYUHANSHUBAJUANZHONGDEZHIYESHUBUSHUANGYINZAIBAIZHUSHIBUFUDUNVNAIXIAYUZHIYIYUESANRIBUGONGDANGFUQUZHISANRIHUYIJUYINGNVERZINVNAIXISHOUYIXIANSUOXIANWURIGONGYIQULANGSHOUYINGMUZHUWUXIATAJIJIUZHISUISHOUYINGJIEBUJUEGUWUNVNAIRIYUYINBOLANGSUILEERWANGDUNVYOUZONGZHICHUMENSHIJIEKEYOUCITITANGZHIMINGBAOZHUNVYUEZIKEYICHUERSHIYI</span><br></pre></td></tr></table></figure></div>

<h4 id="根据拼音获取原文"><a href="#根据拼音获取原文" class="headerlink" title="根据拼音获取原文"></a>根据拼音获取原文</h4><p>水平过低, 一眼看不出原文.<br>只能写代码跑了…<br>废物GPT-4o写不出能跑的代码, 还得我自己写.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">file: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 读取原文, 并过滤掉非中文字符</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>, errors = <span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    text = re.sub(<span class="string">r&quot;[^\u4e00-\u9fa5]&quot;</span>, <span class="string">&quot;&quot;</span>, text)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPinyin</span>(<span class="params">text: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 文本转拼音</span></span><br><span class="line">    pinyin:<span class="built_in">list</span> = lazy_pinyin(text)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(pinyin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">pattern: <span class="built_in">str</span>, text: <span class="built_in">str</span>, length:<span class="built_in">int</span> = <span class="number">14</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text) - length + <span class="number">1</span>):</span><br><span class="line">        tmp = text[i : i + length]</span><br><span class="line">        tmp_pinyin = getPinyin(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp_pinyin == pattern: <span class="keyword">return</span> tmp</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;匹配失败.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    file = <span class="string">&quot;sample.txt&quot;</span></span><br><span class="line">    pattern = <span class="string">&quot;zhinvdayizhirizhijuanshangfanfuzhanwanzhi&quot;</span> <span class="comment"># 14~15个拼音, 取决于juan还是ju an</span></span><br><span class="line">    text = getText(file)</span><br><span class="line">    <span class="keyword">match</span> = find(pattern, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Result:  <span class="subst">&#123;<span class="keyword">match</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Result:  织女大异之日置卷上反复瞻玩至</span><br></pre></td></tr></table></figure></div>
<p>很容易就定位到原文了:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">...以此验之耶？”心怅然自失。而细视美人，眉目如生；背隐隐有细字云：“织女。”大异之。日置卷上，反复瞻玩，至忘食寝。一日方注目间，美人忽折腰起，坐卷上微笑。郎惊绝，伏拜案下。既起，已盈尺矣。益骇，又叩之。下几亭亭，宛然绝代之姝。拜问：“何神？”美人笑曰：“妾颜氏，字如玉，君固相知已久。日垂青盼，脱不一至，恐千载下无复有笃信古人者。”郎喜，遂与寝处。然枕席间亲爱倍至，而不知为人。</span><br><span class="line"></span><br><span class="line">每读必使女坐其侧。女戒勿读，不听；女曰：“君所以不能腾达者，徒以读耳。试观春秋榜上，读如君者几人？若不听，妾行去矣。”郎暂从之。少顷忘其教，吟诵复起。逾刻索女，不知所在。神志丧失，嘱而祷之，殊无影迹。忽忆女所隐处，取《汉书》细检之，直至旧处，果得之。呼之不动，伏以哀祝。女乃下曰：“君再不听，当相永绝！”因使治棋枰、樗蒲之具，日与遨戏。而郎意殊不属。觑女不在，则窃卷流览。恐为女觉，阴取《汉书》第八卷，杂混他所以迷之。一日读酣，女至竟不之觉；忽睹之，急掩卷而女已亡矣。大惧，冥搜诸卷、渺不可得；既，仍于《汉书》八卷中得之，页数不爽。因再拜祝，矢不复读。</span><br><span class="line"></span><br><span class="line">女乃下，与之弈，曰：“三日不工，当复去。”至三日，忽一局赢女二子。女乃喜，授以弦索，限五日工一曲。郎手营目注，无暇他及；久之随手应节，不觉鼓舞。女乃日与饮博，郎遂乐而忘读，女又纵之出门，使结客，由此倜傥之名暴著。女曰：“子可以出而试矣。”</span><br></pre></td></tr></table></figure></div>
<p>摘自<code>《聊斋志异》卷十一·书痴</code></p>
<h4 id="求密码表"><a href="#求密码表" class="headerlink" title="求密码表"></a>求密码表</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;en.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    en = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;de.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    de = f.read()</span><br><span class="line"></span><br><span class="line">key_list = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(en)):</span><br><span class="line">    <span class="keyword">if</span> en[i] <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">        key_list[en[i]] = de[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> de[i] != key_list[en[i]]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error at position <span class="subst">&#123;i&#125;</span>: The mapping is <span class="subst">&#123;en[i]&#125;</span> -&gt; <span class="subst">&#123;key_list[en[i]]&#125;</span> but <span class="subst">&#123;de[i]&#125;</span> is expected.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>, <span class="number">91</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(i) <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">&quot;not found&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span> -&gt; <span class="subst">&#123;key_list[<span class="built_in">chr</span>(i)]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error at position 545: The mapping is N -&gt; H but X is expected.</span><br><span class="line">Error at position 546: The mapping is K -&gt; A but I is expected.</span><br><span class="line">A -&gt; P</span><br><span class="line">B -&gt; Z</span><br><span class="line">C -&gt; F</span><br><span class="line">D -&gt; O</span><br><span class="line">E -&gt; D</span><br><span class="line">F -&gt; V</span><br><span class="line">G -&gt; B</span><br><span class="line">H -&gt; G</span><br><span class="line">I -&gt; X</span><br><span class="line">J -&gt; J</span><br><span class="line">K -&gt; A</span><br><span class="line">L -&gt; Y</span><br><span class="line">M -&gt; W</span><br><span class="line">N -&gt; H</span><br><span class="line">O -&gt; N</span><br><span class="line">P -&gt; Q</span><br><span class="line">Q -&gt; K</span><br><span class="line">R -&gt; I</span><br><span class="line">S -&gt; S</span><br><span class="line">T -&gt; L</span><br><span class="line">U -&gt; R</span><br><span class="line">V -&gt; E</span><br><span class="line">W -&gt; T</span><br><span class="line">X -&gt; M</span><br><span class="line">Y -&gt; U</span><br><span class="line">Z -&gt; C</span><br></pre></td></tr></table></figure></div>
<p>有2个字符没对应上, 应该是多音字导致的, 无伤大雅.</p>
<p>密码表如下:</p>
<table>
<thead>
<tr>
<th>映射前</th>
<th>映射后</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>P</td>
</tr>
<tr>
<td>B</td>
<td>Z</td>
</tr>
<tr>
<td>C</td>
<td>F</td>
</tr>
<tr>
<td>D</td>
<td>O</td>
</tr>
<tr>
<td>E</td>
<td>D</td>
</tr>
<tr>
<td>F</td>
<td>V</td>
</tr>
<tr>
<td>G</td>
<td>B</td>
</tr>
<tr>
<td>H</td>
<td>G</td>
</tr>
<tr>
<td>I</td>
<td>X</td>
</tr>
<tr>
<td>J</td>
<td>J</td>
</tr>
<tr>
<td>K</td>
<td>A</td>
</tr>
<tr>
<td>L</td>
<td>Y</td>
</tr>
<tr>
<td>M</td>
<td>W</td>
</tr>
<tr>
<td>N</td>
<td>H</td>
</tr>
<tr>
<td>O</td>
<td>N</td>
</tr>
<tr>
<td>P</td>
<td>Q</td>
</tr>
<tr>
<td>Q</td>
<td>K</td>
</tr>
<tr>
<td>R</td>
<td>I</td>
</tr>
<tr>
<td>S</td>
<td>S</td>
</tr>
<tr>
<td>T</td>
<td>L</td>
</tr>
<tr>
<td>U</td>
<td>R</td>
</tr>
<tr>
<td>V</td>
<td>E</td>
</tr>
<tr>
<td>W</td>
<td>T</td>
</tr>
<tr>
<td>X</td>
<td>M</td>
</tr>
<tr>
<td>Y</td>
<td>U</td>
</tr>
<tr>
<td>Z</td>
<td>C</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
</search>
